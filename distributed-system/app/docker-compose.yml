version: '3.8'

services:
  # PostgreSQL veritabanı servisi
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mpfb1907
    ports:
      - "5432:5432"
    networks:
      - app-network

  # Redis cache servisi
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  # Spring Boot 1 uygulaması
  app1:
    build:
      context: ./  # Eğer dockerfile kullanıyorsanız, build yapılandırmasını doğru ayarladığınızdan emin olun
    container_name: app1
    ports:
      - "8085:8085"
    depends_on:
      - postgres
      - redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/appdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: mpfb1907
      APP_NAME: app1  # app1 için özel çevre değişkeni
    networks:
      - app-network

  # Spring Boot 2 uygulaması
  app2:
    build:
      context: ./  # Dockerfile'ınız doğru şekilde ayarlanmalı
    container_name: app2
    ports:
      - "8086:8085"
    depends_on:
      - postgres
      - redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/appdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: mpfb1907
      APP_NAME: app2  # app2 için özel çevre değişkeni
    networks:
      - app-network

  # Nginx servisi
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"  # Nginx 80 portundan dışarıya bağlanacak
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Nginx yapılandırma dosyasını bağla
    depends_on:
      - app1
      - app2
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
